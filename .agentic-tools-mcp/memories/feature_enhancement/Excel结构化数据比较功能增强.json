{
  "id": "b265e531-c7f9-4831-a46e-039fb84e481c",
  "title": "Excel结构化数据比较功能增强",
  "details": "# Excel比较功能增强 - 结构化数据比较\n\n## 🎯 用户需求\n基于用户反馈，Excel比较功能需要支持更精确的表格化数据比较：\n1. **指定表头位置** - 支持第二行等非首行作为表头\n2. **指定ID列位置** - 用于行对象的唯一标识和匹配\n3. **按行对象比较** - 将每行视为数据记录，进行属性级别的差异分析\n\n## 🚀 实现方案\n\n### 1. 数据模型扩展\n**ComparisonOptions增强**:\n- `header_row: Optional[int]` - 表头行号(1-based)\n- `id_column: Optional[Union[int, str]]` - ID列位置(数字索引或列名)\n- `structured_comparison: bool` - 启用结构化比较模式\n\n**新增数据类**:\n- `RowDifference` - 行级差异信息，包含行ID、差异类型、行数据、字段差异列表\n- `StructuredSheetComparison` - 结构化工作表比较结果，包含表头差异、行统计等\n\n**差异类型扩展**:\n- `ROW_ADDED`, `ROW_REMOVED`, `ROW_MODIFIED`, `HEADER_CHANGED`\n\n### 2. 核心算法实现\n\n**结构化数据比较流程**:\n1. **表头提取** - `_extract_headers()` 从指定行提取表头\n2. **数据行提取** - `_extract_data_rows()` 按ID索引提取数据行\n3. **表头比较** - `_compare_headers()` 检测表头数量和内容差异\n4. **行级比较** - `_compare_data_rows()` 基于ID匹配进行行对象比较\n5. **字段级比较** - `_compare_row_data()` 详细的属性差异检测\n\n**智能ID处理**:\n- 支持数字列索引(1-based)和列名两种指定方式\n- 自动处理缺失ID列的情况，使用行号作为默认ID\n- 空行过滤和ID重复处理\n\n### 3. MCP接口增强\n\n**excel_compare_sheets接口新增参数**:\n```python\nstructured_comparison: bool = False  # 启用结构化比较\nheader_row: Optional[int] = None     # 表头行号\nid_column: Optional[Union[int, str]] = None  # ID列位置\n```\n\n## 📊 功能特性\n\n### 比较维度\n1. **表头级比较** - 检测列数变化、列名变化\n2. **行级比较** - 基于ID匹配的行增删改检测\n3. **字段级比较** - 属性级别的精确差异定位\n\n### 统计信息\n- `identical_rows` - 完全相同的行数\n- `modified_rows` - 修改的行数  \n- `added_rows` - 新增的行数\n- `removed_rows` - 删除的行数\n\n### 差异报告\n- 表头差异列表\n- 行级差异详情，包含具体的字段变化\n- 支持原有的单元格级比较和新的结构化比较两种模式\n\n## 🎯 使用场景\n\n### 典型用例\n1. **数据对账** - 比较两个版本的业务数据表，快速识别记录变化\n2. **配置比较** - 比较配置文件的参数变化，按参数名精确匹配\n3. **清单核对** - 基于ID或编号进行物品清单的增删改对比\n\n### 灵活配置\n- `header_row=2` - 第二行作为表头\n- `id_column=\"ID\"` - 使用\"ID\"列作为唯一标识\n- `id_column=1` - 使用第一列作为唯一标识\n\n## 🔄 向后兼容\n- 保持原有单元格级比较功能完全不变\n- 通过`structured_comparison`参数选择比较模式\n- 默认为传统比较模式，确保现有用户不受影响",
  "category": "feature_enhancement",
  "dateCreated": "2025-08-22T07:19:27.662Z",
  "dateUpdated": "2025-08-22T07:19:27.662Z"
}